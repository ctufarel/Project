''' Script-4.1- Function find(): generates finalgenes_func.txt file that stores the shared genes with DE genes found in Inflammation (TEtranscripts). 
				Function annot(): generates finalgenes_compared_func.txt file that stores the shared genes with DE genes (DEGs) found in both Inflammation and 						Tumour (DEGs detected by TEtranscripts). It also generated final_output.txt with further information regarding the specific gene related LCT 
'''

import sys
outpath=sys.argv[1]
var1 = sys.argv[2]
var2 = sys.argv[3]

infl_fold2file = var1 	# path to DEGenes for inflammation
pat_fold2file = var2	# path to DEGenes for patient dataset

def find(folder):
	with open(folder) as ref:
		namefol = str(folder)
		dataset =namefol.strip('./TEtrans_out/')
		dataset=dataset.strip('.txt')
			
		with open(str('./'+outpath+'/'+dataset+'_DEG_func.txt'),'w') as new:	# file that stores gene names from DE genes detected by TEtranscript 
			lines = ref.readlines()
			for line in lines:
				gene_name = line.split('\t')
				new.writelines(gene_name[0]+'\n')	# writes DEG name in inflammation dataset in ./outpath/gene_DE_infl_func.txt

	shared_genes = []	# empty list for appending DEG that are found in both: shared-annotated LCTs and DEG generated by TEtranscripts 
	with open('./Annotation_hg19/annotated_genes.txt') as ref:	# file that stores gene names for eah shared-LCT 
		with open(str('./'+outpath+'/'+dataset+'_DEG_func.txt')) as new:	# file that stores DE genes detected by TEtranscript 
			lines = ref.readlines()
			de_genes = new.readlines()	# DE genes
			for line in lines:
				line = line.split('\t')
				genename = line[0] #1
				for de_gene in de_genes:
					if de_gene == genename:	# DE gene is in
						shared_genes.append(genename)

			mylist = list(dict.fromkeys(shared_genes))
		with open(str('./'+outpath+'/'+dataset+'_sharedGenes_func.txt'),'w') as fin:
			for line in mylist:
				fin.writelines(line)
	return

def annot(folderi,folderp):
	namefoli = str(folderi)
	dataseti =namefoli.strip('./TEtrans_out/')
	dataseti = dataseti.strip('.txt')

	namefolp = str(folderp)
	datasetp = namefolp.strip('./TEtrans_out/')
	datasetp = datasetp.strip('.txt')

	shared_genes2 = []
	with open(str('./'+outpath+'/'+datasetp+'_sharedGenes_func.txt')) as refp:		# gene names found in both LCT annotation and DE genes detected by TEtranscript	-> tumour
		with open(str('./'+outpath+'/'+dataseti+'_sharedGenes_func.txt')) as refi:	# gene names found in both LCT annotation and DE genes detected by TEtranscript	-> inflamed	
			lines = refp.readlines()	# tumour list of genes
			de_genes = refi.readlines()	# inflammation list of gees
			# for each gene tumour specific
			for line in lines:
				line = line.split('\t')	# tumour list of genes
				genename = line[0]
				genename = genename.replace('\n','')
				# for each gene inflamed specific
				for de_gene in de_genes:
					de_gene = de_gene.replace('\n','')
				# select gene names when they are found in both tumour and inflammation list of genes
					if de_gene == genename:	# DE gene is in
						shared_genes2.append(genename)
		# some of the gene names are redundant, create a dictionary from shared_gene list to eliminate redundant gene names, and store them in mylist
			mylist = list(dict.fromkeys(shared_genes2))
		with open(str('./'+outpath+'/finalgenes_compared_func.txt'),'w') as fin:
		# generated new file with the non-redundant list of genes shared for both conditions: tumour and inflamed tissues
			for line in mylist:
				fin.writelines(line+'\n')

	genes = []		# empty list to store final output -> optional
	discard = []	# empty list to store RefSeq-accessions -> optional (ensures non-redundant list of LCTs, two or more detected LCTs can be assumed as one)
	with open(str('./'+outpath+'/full_info.txt')) as ref:
		with open(str('./'+outpath+'/finalgenes_compared_func.txt')) as ref2:
			with open(str('./'+outpath+'/final_output.txt'),'w') as new:
				lines = ref.readlines()
				lines2 = ref2.readlines()
				new.write('Final-Pipeline-Output text file with the basic information regarding gene position related to specific L1-5end-LCT, strand and specific RefSeq-accession: '+'\n'+'\n')
				for line in lines:
					line = line.replace('\n','')
					line = line.split('\t')
					genename = line[7]
					#print(genename)
					for line2 in lines2:
						genedetec = line2
						if genename in genedetec and line[5] not in discard: # if one wants a more specific output, discard list is not required
							discard.append(line[5])
							#genes.append(line[0]+'\t'+line[1]+'\t'+line[2]+'\t'+line[3]+'\t'+line[4]+'\t'+line[5]+'\t'+genename+'\n')
							new.writelines(line[0]+'\t'+line[1]+'\t'+line[2]+'\t'+line[3]+'\t'+line[4]+'\t'+line[5]+'\t'+genename+'\n')
		
	return
	
find(infl_fold2file)
find(pat_fold2file)

annot(infl_fold2file,pat_fold2file)


